import React, { useEffect, useRef, useState } from 'react';
import SmiskiModal from './SmiskiModal';
import SmiskiCollectionModal from './SmiskiCollectionModal';
import alarmSound from './images/alarm.mp3';

// Your images in /frontend/src/images
import coinImg from './images/coinImg.png';
import menuImg from './images/menuImg.png';
import bgImg   from './images/bgImg.png';

interface TimerProps {
  onCoinsEarned: () => void;
  userId: string;
  coins: number;
}

const WORK = 25;
const BREAK = 5;

function fmt(sec: number) {
  const m = Math.floor(sec / 60).toString().padStart(2, '0');
  const s = (sec % 60).toString().padStart(2, '0');
  return `${m}:${s}`;
}

const Timer: React.FC<TimerProps> = ({ onCoinsEarned, userId, coins }) => {
  const [mode, setMode] = useState<'work' | 'break'>('work');
  const [secondsLeft, setSecondsLeft] = useState(WORK);
  const [isRunning, setIsRunning] = useState(false);
  const timerRef = useRef<ReturnType<typeof setTimeout> | null>(null);

  const [shopOpen, setShopOpen] = useState(false);
  const [collectionOpen, setCollectionOpen] = useState(false);

  // ðŸ”Š Sound
  const audioRef = useRef<HTMLAudioElement | null>(null);
  useEffect(() => {
    audioRef.current = new Audio(alarmSound);
    audioRef.current.preload = 'auto';
    audioRef.current.volume = 0.8;
  }, []);

  const playAlarm = () => {
    if (!audioRef.current) return;
    try {
      audioRef.current.currentTime = 0;
      void audioRef.current.play();
    } catch {}
  };

  const handleStart = () => {
    if (audioRef.current) {
      try {
        void audioRef.current.play().then(() => {
          audioRef.current?.pause();
          if (audioRef.current) audioRef.current.currentTime = 0;
        });
      } catch {}
    }
    setIsRunning(true);
  };

  const handlePause = () => setIsRunning(false);
  const handleStop = () => {
    setIsRunning(false);
    setSecondsLeft(mode === 'work' ? WORK : BREAK);
  };

  const goToBreak = () => {
    setMode('break');
    setSecondsLeft(BREAK);
    setIsRunning(false);
  };
  const goToWork = () => {
    setMode('work');
    setSecondsLeft(WORK);
    setIsRunning(false);
  };

  useEffect(() => {
    if (!isRunning || secondsLeft <= 0) return;
    timerRef.current = setTimeout(() => setSecondsLeft((p) => p - 1), 1000);
    return () => { if (timerRef.current) clearTimeout(timerRef.current); };
  }, [isRunning, secondsLeft]);

  useEffect(() => {
    if (secondsLeft !== 0) return;
    playAlarm();
    if (mode === 'work') {
      onCoinsEarned(); // increments coins & cycles on the server
      goToBreak();
    } else {
      goToWork();
    }
  }, [secondsLeft]); // eslint-disable-line

  return (
    <div className="timer-card">
      <div className="card-top">
        {/* Coin button (shows real coins) */}
        <button
          className="coin-btn"
          type="button"
          onClick={() => setShopOpen(true)}
          aria-label="Coin button"
          title="Coins"
        >
          <img className="imgicon" src={coinImg} alt="Coins" />
          <span>{coins}</span>
        </button>

        {/* (no cycles in UI) */}

        {/* Menu button */}
        <button
          className="menu-btn"
          type="button"
          onClick={() => setCollectionOpen(true)}
          aria-label="Menu button"
          title="My Collection"
        >
          <img className="imgicon" src={menuImg} alt="" />
        </button>
      </div>

      <div className="time-wrap">
        <img className="time-bg" src={bgImg} alt="" />
        <div className="time">{fmt(secondsLeft)}</div>
      </div>

      <div className="controls">
        {!isRunning ? (
          <button className="primary" onClick={handleStart}>Start</button>
        ) : (
          <div className="row">
            <button className="ghost" onClick={handlePause}>Pause</button>
            <button className="ghost" onClick={handleStop}>Stop</button>
          </div>
        )}
      </div>

      {/* Modals */}
      <SmiskiModal open={shopOpen} onClose={() => setShopOpen(false)} />
      <SmiskiCollectionModal open={collectionOpen} onClose={() => setCollectionOpen(false)} />
    </div>
  );
};

export default Timer;
