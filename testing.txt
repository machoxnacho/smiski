docker run -p 5000:5000 \
  -e AWS_ACCESS_KEY_ID=... \
  -e AWS_SECRET_ACCESS_KEY=... \
  -e AWS_REGION=us-east-1 \
  smiski-backend:latest

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 900546069136.dkr.ecr.us-east-1.amazonaws.com

USE ME:
docker buildx build --platform linux/arm64 -t smiski-backend:latest --load .
docker tag smiski-backend:latest 900546069136.dkr.ecr.us-east-1.amazonaws.com/smiski-backend:latest
docker push 900546069136.dkr.ecr.us-east-1.amazonaws.com/smiski-backend:latest

Folder structure
smiski/
├── backend/
│   ├── server.js
│   ├── package.json
│
├── frontend/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── App.tsx
│   │   ├── Timer.tsx
│   │   ├── Menu.tsx
│   │   └── index.tsx
│   ├── package.json
│   └── tsconfig.json
│
├── Dockerfile
└── .dockerignore

--------------------------------------------------------------------------------------------------------------------


import React, { useState, useEffect } from 'react';

const Timer: React.FC = () => {
  const [timeLeft, setTimeLeft] = useState(25 * 60); // 25 minutes
  const [isActive, setIsActive] = useState(false);

  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;

    if (isActive && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft((prevTime) => prevTime - 1);
      }, 1000);
    } else if (timeLeft === 0) {
      clearInterval(interval!);
      alert('Pomodoro session ended!');
    } else {
      clearInterval(interval!);
    }

    return () => clearInterval(interval!);
  }, [isActive, timeLeft]);

  const toggleTimer = () => setIsActive(!isActive);
  const resetTimer = () => {
    setIsActive(false);
    setTimeLeft(25 * 60); // reset to 25 minutes
  };

  const minutes = Math.floor(timeLeft / 60);
  const seconds = timeLeft % 60;

  return (
    <div className="timer-container">
      <h1>Pomodoro Timer</h1>
      <div className="timer">
        <span>{minutes < 10 ? `0${minutes}` : minutes}:</span>
        <span>{seconds < 10 ? `0${seconds}` : seconds}</span>
      </div>
      <Menu onStart={toggleTimer} onReset={resetTimer} isActive={isActive} />
    </div>
  );
};

export default Timer;



