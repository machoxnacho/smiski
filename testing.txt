docker run -p 5000:5000 \
  -e AWS_ACCESS_KEY_ID=... \
  -e AWS_SECRET_ACCESS_KEY=... \
  -e AWS_REGION=us-east-1 \
  smiski-backend:latest

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 900546069136.dkr.ecr.us-east-1.amazonaws.com

USE ME:
docker buildx build --platform linux/arm64 -t smiski-backend:latest --load .
docker tag smiski-backend:latest 900546069136.dkr.ecr.us-east-1.amazonaws.com/smiski-backend:latest
docker push 900546069136.dkr.ecr.us-east-1.amazonaws.com/smiski-backend:latest

Folder structure
smiski/
├── backend/
│   ├── server.js
│   ├── package.json
│
├── frontend/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── App.tsx
│   │   ├── Timer.tsx
│   │   ├── Menu.tsx
│   │   └── index.tsx
│   ├── package.json
│   └── tsconfig.json
│
├── Dockerfile
└── .dockerignore

--------------------------------------------------------------------------------------------------------------------
1. Amazon SNS – Scaling / Alert Notifications

Pillar: Operational Excellence & Reliability

Why: Automates operational awareness by notifying you (or your team) when ECS services scale in/out or when CPU utilization hits thresholds, ensuring quick response to changes in demand.

2. Amazon GuardDuty – Threat Detection

Pillar: Security

Why: Adds continuous monitoring for malicious activity and unauthorized access attempts, going beyond WAF to detect threats at the account and network level.

3. Amazon CloudFront – Global Content Delivery

Pillar: Performance Efficiency & Security

Why: Speeds up content delivery globally by caching static assets at edge locations, reducing latency and providing additional DDoS protection with AWS Shield Standard.

4. Multi-Region ECS Deployment

Pillar: Reliability & Resilience

Why: Increases availability by deploying ECS services across multiple AWS regions, ensuring the application remains operational during regional outages.
Capstone Project 

Q1: What is the required format for the Capstone presentation and submission?
A1: The Capstone Project will consist of two parts:

1) Live Presentation: 
 - Primary Format: Live presentation (in-person or via Chime)
 - Alternative Option: Recorded presentation (if unable to present live i.e., school is starting early)
 - Scheduling: Flexible timing - you may schedule directly with your manager/mentor before/by Week 11 if you're ready to present earlier. 

2) Written Document: 
- Length: Minimum 2 pages, maximum 6 pages
 - Format: Flexible documentation types, including but not limited to: PRFAQ, User Manual, or Other appropriate documentation formats
[+] https://w.amazon.com/bin/view/WritingHub/Writing_Handbook/

Q2: When will I be presenting the Capstone Project?
A2: You can present Capstone Project at any time before/by Week 11. The 2-hour block listed on the schedule is a suggested timeframe - But you can coordinate directly with your mentor and manager to schedule a time that works the best. 

Q3: Who will be my target audience?
A3: Your target audience will be your manager and mentor.

--------------------------------------------------------------------------------------------------------------------

Highly Available and Auto-Scaling Containerized Application Deployment [Containers Domain]



Project Announcement/Summary:

In this project, you will design and implement a highly available, auto-scaling containerized application using Amazon ECS with EC2 launch type. You'll deploy the application behind an Application Load Balancer with WAF protection, demonstrating how to achieve scalability, load balancing, and enhanced security for containerized workloads.


Problem Statement:

A customer has developed a containerized application but struggles with deploying it in a scalable, highly available manner. They need a solution that can automatically adjust to varying traffic loads, distribute requests efficiently, and provide protection against common web threats. The current setup lacks elasticity and resilience, leading to performance issues during traffic spikes and potential downtime.


Key Learning and Exploration Points:

Technical Deep Dives:

* Amazon ECS architecture and components
* EC2 launch type vs. Fargate
* Application Load Balancer features and configuration
* Auto Scaling for ECS services
* AWS WAF integration and rule sets

Development Focus:

* Setting up an ECS cluster with EC2 instances
* Deploying containerized applications on ECS
* Configuring Application Load Balancer and target groups
* Implementing auto-scaling based on CPU utilization
* Integrating WAF with ALB for enhanced security

Questions to Consider:

* How does ECS with EC2 launch type differ from using Fargate, and when would you choose one over the other?
* the customer is responsible for managing the EC2 instances, selecting the instance type, the scaling, and patching
* What are the best practices for designing task definitions and services in ECS?
* How can you optimize the auto-scaling configuration to balance responsiveness and cost?
* What WAF rules are most critical for protecting containerized web applications? How can you test if the WAF is working?
* How would you handle container health checks? 
* What monitoring and logging strategies would you implement for this architecture?


Success Metrics/Goals:

* Successfully deploy a containerized application across multiple EC2 instances in an ECS cluster
* Configure an Application Load Balancer to distribute traffic evenly across containers
* Implement auto-scaling that demonstrates both scale-out and scale-in based on CPU utilization
* Integrate WAF with ALB and configure at least three rule sets for common web threats
* Perform a load test to verify auto-scaling functionality and ALB distribution
* Create a CloudWatch dashboard showing key metrics for the ECS cluster, ALB, and WAF
* Document the entire setup process and create a presentation explaining the architecture, including security measures and potential optimizations

By completing this project, you will gain hands-on experience with container orchestration, load balancing, auto-scaling, and web application security. You'll develop skills in designing resilient and scalable architectures for containerized applications, which are crucial for modern cloud deployments and support roles.

